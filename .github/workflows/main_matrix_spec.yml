name: CI
on:
  # # Triggers the workflow on push but only for the master branch
  push:
    branches: [testing_branch, disable-oled]
    paths-ignore:
      - "**.md"
      - "version.properties"
    tags:
      - v*

  # Note: This is different from "pull_request". Need to specify ref when doing checkouts.
  pull_request_target:
    branches: [testing_branch, disable-oled]
    paths-ignore:
      - "**.md"
      #- "**.yml"

  workflow_dispatch:

jobs:
  build-esp32:
    strategy:
      fail-fast: false
      matrix:
        include:
          - board: tlora-v2-1-1_6
          - board: tlora-v2-1-1_6_lifepo4
          - board: tlora-v2-1-1_6_nooled
          - board: tlora-v2-1-1_6_lifepo4_nooled
          - board: tbeam
          - board: tbeam_lifepo4
    uses: ./.github/workflows/build_esp32_spec.yml
    with:
      board: ${{ matrix.board }}
  
  build-nrf52:
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        include:
          - board: t-echo
    uses: ./.github/workflows/build_nrf52_spec.yml
    with:
      board: ${{ matrix.board }}

  build-native:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build base
        id: base
        uses: ./.github/actions/setup-base

      # We now run integration test before other build steps (to quickly see runtime failures)
      #- name: Build for native
      #  run: platformio run -e native
      #- name: Integration test
      # run: |
      #.pio/build/native/program
      #& sleep 20 # 5 seconds was not enough
      #echo "Simulator started, launching python test..."
      #python3 -c 'from meshtastic.test import testSimulator; testSimulator()'

      - name: Build Native
        run: bin/build-native.sh

      - name: Get release version string
        run: echo "version=$(./bin/buildinfo.py long)" >> $GITHUB_OUTPUT
        id: version

      - name: Store binaries as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: firmware-native-${{ steps.version.outputs.version }}.zip
          path: |
            release/device-*.sh
            release/device-*.bat

#      - name: Docker login
#         if: ${{ github.event_name != 'pull_request_target' && github.event_name != 'pull_request' }}
#        uses: docker/login-action@v2
#        with:
#          username: meshtastic
#          password: ${{ secrets.DOCKER_TOKEN }}

#      - name: Docker setup
#        if: ${{ github.event_name != 'pull_request_target' && github.event_name != 'pull_request' }}
#        uses: docker/setup-buildx-action@v2

#      - name: Docker build and push tagged versions
#        if: ${{ github.ref == 'refs/heads/master' && github.event_name != 'pull_request_target' && github.event_name != 'pull_request' }}
#        uses: docker/build-push-action@v3
#        with:
#          context: .
#          file: ./Dockerfile
#          push: true
#          tags: meshtastic/device-simulator:${{ steps.version.outputs.version }}

#      - name: Docker build and push
#        if: github.ref == 'refs/heads/master'
#        uses: docker/build-push-action@v3
#        with:
#          context: .
#          file: ./Dockerfile
#          push: true
#          tags: meshtastic/device-simulator:latest
  gather-artifacts:
    runs-on: ubuntu-latest
    needs:
      [build-esp32, build-nrf52, build-native]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}

      - uses: actions/download-artifact@v3
        with:
          path: ./

      - name: Get release version string
        run: echo "version=$(./bin/buildinfo.py long)" >> $GITHUB_OUTPUT
        id: version

      - name: Move files up
        run: mv -b -t ./ ./*tbeam-2*/littlefs*.bin ./*tbeam-2*/bleota.bin ./**/firmware*.bin ./*t-echo*/Meshtastic_nRF52_factory_erase.uf2 ./**/firmware-*.uf2 ./**/firmware-*-ota.zip ./**/*.elf ./*native*/*device-*.sh ./*native*/*device-*.bat

      - name: Repackage in single firmware zip
        uses: actions/upload-artifact@v3
        with:
          name: firmware-${{ steps.version.outputs.version }}
          path: |
            ./*.bin
            ./*.uf2
            ./firmware-*-ota.zip
            ./device-*.sh
            ./device-*.bat
          retention-days: 1

      - uses: actions/download-artifact@v3
        with:
          name: firmware-${{ steps.version.outputs.version }}
          path: ./output

      # For diagnostics
      - name: Show artifacts
        run: ls -lR

      - name: Device scripts permissions
        run: |
          chmod +x ./output/device-install.sh
          chmod +x ./output/device-update.sh

      - name: Zip firmware
        run: zip -j -9 -r ./firmware-${{ steps.version.outputs.version }}.zip ./output

      - name: Repackage in single elfs zip
        uses: actions/upload-artifact@v3
        with:
          name: debug-elfs-${{ steps.version.outputs.version }}.zip
          path: ./*.elf
          retention-days: 1

      - name: Create request artifacts
        if: ${{ github.event_name == 'pull_request_target' || github.event_name == 'pull_request' }}
        uses: gavv/pull-request-artifacts@v1.0.0
        with:
          commit: ${{ (github.event.pull_request_target || github.event.pull_request).head.sha }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          artifacts-token: ${{ secrets.ARTIFACTS_TOKEN }}
          artifacts-repo: meshtastic/artifacts
          artifacts-branch: device
          artifacts-dir: pr
          artifacts: ./firmware-${{ steps.version.outputs.version }}.zip

  release-artifacts:
    runs-on: ubuntu-latest
    if: startsWith(github.event.ref, 'refs/tags/v')
    needs: [gather-artifacts]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Get release version string
        run: echo "version=$(./bin/buildinfo.py long)" >> $GITHUB_OUTPUT
        id: version

      - uses: actions/download-artifact@v3
        with:
          name: firmware-${{ steps.version.outputs.version }}
          path: ./output

      - name: Device scripts permissions
        run: |
          chmod +x ./output/device-install.sh
          chmod +x ./output/device-update.sh

      - name: Zip firmware
        run: zip -j -9 -r ./firmware-${{ steps.version.outputs.version }}.zip ./output

      - uses: actions/download-artifact@v3
        with:
          name: debug-elfs-${{ steps.version.outputs.version }}.zip
          path: ./elfs

      - name: Zip Elfs
        run: zip -j -9 -r ./debug-elfs-${{ steps.version.outputs.version }}.zip ./elfs

      # For diagnostics
      - name: Show artifacts
        run: ls -lR

      - name: Create release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: true
          prerelease: true
          release_name: Meshtastic Firmware ${{ steps.version.outputs.version }}
          tag_name: v${{ steps.version.outputs.version }}
          body: |
            Autogenerated by github action, developer should edit as required before publishing...
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Add bins to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./firmware-${{ steps.version.outputs.version }}.zip
          asset_name: firmware-${{ steps.version.outputs.version }}.zip
          asset_content_type: application/zip

      - name: Add debug elfs to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./debug-elfs-${{ steps.version.outputs.version }}.zip
          asset_name: debug-elfs-${{ steps.version.outputs.version }}.zip
          asset_content_type: application/zip

      # - name: Bump version.properties
      #   run: >-
      #     bin/bump_version.py

      # - name: Create version.properties pull request
      #   uses: peter-evans/create-pull-request@v3
      #   with:
      #     add-paths: |
      #       version.properties
